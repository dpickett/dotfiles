#!/usr/bin/env zsh

{{- if eq .chezmoi.os "linux" }}
# Source shared utilities from chezmoi source directory
source "{{ .chezmoi.sourceDir }}/dot_local/lib/chezmoi/utils.sh"

# Install required packages
install_packages git fzf

# Configure fzf non-interactively (skip auto-completion and key binding setup)
if command -v fzf >/dev/null 2>&1; then
    echo "fzf installed successfully. Key bindings will be handled by your shell configuration."
fi
{{- else }}
brew install -q git fzf
{{- end }}

# Install asdf 0.16+ (Go version) via go install if not available
if ! command -v asdf >/dev/null 2>&1 && [[ ! -f ~/.asdf/bin/asdf ]]; then
    echo "Installing asdf v0.16.4..."
    # Clone to home directory, not chezmoi source
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.16.4
    # Add asdf to PATH for this session
    export PATH="$HOME/.asdf/bin:$PATH"
elif [[ -f ~/.asdf/bin/asdf ]]; then
    # asdf exists, add to PATH
    export PATH="$HOME/.asdf/bin:$PATH"
elif command -v asdf >/dev/null 2>&1; then
    echo "asdf already available in PATH"
fi

# Check if asdf is available before proceeding
if command -v asdf >/dev/null 2>&1; then
    asdf plugin add nodejs
    asdf plugin add ruby
    
    # update the default <chezmoi root>/dot_tool-versions if you update these
    asdf install nodejs 22.15.0
    asdf install ruby 3.4.6
    
    # Set global versions to make them available in current session
    asdf global nodejs 22.15.0
    asdf global ruby 3.4.6
    
    # For asdf 0.16+ (Go version), we need to add the install paths to PATH
    export PATH="$(asdf where nodejs)/bin:$(asdf where ruby)/bin:$HOME/go/bin:$PATH"
    
    # Verify Node.js is available
    if command -v node >/dev/null 2>&1; then
        echo "Node.js $(node --version) is available"
        
        
        # Enable corepack for package manager management
        if command -v corepack >/dev/null 2>&1; then
            corepack enable
            echo "Corepack enabled successfully"
            
            # Prepare and activate latest pnpm globally
            corepack prepare pnpm@latest --activate
            echo "Latest pnpm prepared and activated via corepack"
            
            # Configure pnpm global directory and add to PATH
            if command -v pnpm >/dev/null 2>&1; then
                # Set up pnpm home directory
                export PNPM_HOME="$HOME/.local/share/pnpm"
                mkdir -p "$PNPM_HOME"
                
                # Configure pnpm to use this directory
                pnpm config set global-dir "$PNPM_HOME"
                pnpm config set global-bin-dir "$PNPM_HOME"
                
                # Add to PATH
                export PATH="$PNPM_HOME:$PATH"
                echo "pnpm global directory configured: $PNPM_HOME"
            fi
        else
            echo "Warning: corepack not found in Node.js installation"
        fi
    else
        echo "Warning: Node.js not available after installation"
    fi
else
    echo "asdf not found, trying to source it..."
    if [[ -f ~/.asdf/asdf.sh ]]; then
        . ~/.asdf/asdf.sh
        if command -v asdf >/dev/null 2>&1; then
            echo "asdf sourced successfully"
            # Run the installation commands here
            asdf plugin add nodejs
            asdf plugin add ruby
            asdf install nodejs 22.15.0
            asdf install ruby 3.4.6
            asdf global nodejs 22.15.0
            asdf global ruby 3.4.6
            asdf reshim
            
            # Try corepack
            if command -v corepack >/dev/null 2>&1; then
                corepack enable
                echo "Corepack enabled successfully"
            fi
        fi
    else
        echo "Error: ~/.asdf/asdf.sh not found"
    fi
fi

